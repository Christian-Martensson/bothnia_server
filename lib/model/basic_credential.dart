import '../bothnia_server.dart';
import 'dart:math';
import 'package:convert/convert.dart';

/// Return a random hex of <len> bytes
String randomHex(int len) {
  var rng = Random();
  var l = List.generate(len, (_) => rng.nextInt(256));
  return hex.encode(l);
}

/// A simple username/password combination.
class BasicCredential extends ManagedObject<_BasicCredential>
    implements _BasicCredential {
  @override
  void willInsert() {
    created = DateTime.now().toUtc();
    modified = DateTime.now().toUtc();
  }

  @override
  void willUpdate() {
    modified = DateTime.now().toUtc();
  }

  static Future<BasicCredential> insertOrUpdate(
      BasicCredential credential, ManagedContext context) async {
    // No credential, or missing username will cause an autogenerated random credential
    if (credential == null || credential.username == null) {
      credential = BasicCredential()
        ..username = randomHex(10)
        ..password = randomHex(10);
      // TODO: Make sure there is no such username already
      return context.insertObject(credential);
    }
    var credQuery = Query<BasicCredential>(context);
    credQuery.where((cred) => cred.username).equalTo(credential.username);
    // A missing password is fine, then we only do lookup of existing credential
    if (credential.password == null) {
      //print('No password in $credential');
      return credQuery.fetchOne();
    }
    var cred = await credQuery.fetchOne();
    if (cred == null) {
      // We insert it as a new one
      //print('Inserting $credential');
      return context.insertObject(credential);
    } else {
      // If found we update it with new password
      //print('Updating $credential');
      credQuery.values = credential;
      return credQuery.updateOne();
    }
  }

  @override
  String toString() {
    return '(username: $username password: $password)';
  }
}

class _BasicCredential {
  @primaryKey
  int id;

  DateTime created;
  DateTime modified;

  @Column(indexed: true, unique: true)
  String username;

  String password;
}
